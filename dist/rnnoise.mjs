var e={};e.d=(t,s)=>{for(var o in s)e.o(s,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:s[o]})},e.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var t={};function s({scriptSrc:e,moduleSrc:t}={}){let{origin:o,pathname:r}=window.document.location,n=o+r.substring(0,r.lastIndexOf("/")+1);return[e=e||n+"rnnoise.worklet.js","string"==typeof(t=t||n+"rnnoise.wasm")?WebAssembly.compileStreaming(fetch(t)):WebAssembly.compile(t)]}e.d(t,{S:()=>o,m:()=>s});class o extends AudioWorkletNode{static async register(e,t){if(o.ready)return e.audioWorklet.addModule(o.scriptSrc);let[r,n]=t=t||await s();return o.scriptSrc=r,Promise.all([e.audioWorklet.addModule(r),n.then(e=>{this.module=e})]).then(()=>{this.ready=!0})}static module=null;static scriptSrc=null;static ready=!1;onstatus=null;constructor(e){if(!o.ready)throw Error("Call RNNoiseNode.register() first");super(e,"rnnoise",{channelCountMode:"explicit",channelCount:1,channelInterpretation:"speakers",numberOfInputs:1,numberOfOutputs:1,outputChannelCount:[1],processorOptions:{module:o.module}}),this.port.onmessage=({data:e})=>{let t=Object.assign(new Event("status"),e);this.dispatchEvent(t),this.onstatus&&this.onstatus(t)}}update(e=!0){this.port.postMessage(e)}}var r=t.S,n=t.m;export{r as RNNoiseNode,n as rnnoise_loadAssets};
//# sourceMappingURL=rnnoise.mjs.map