{"version":3,"file":"rnnoise.worklet.js","sources":["webpack://simple-rnnoise-wasm/./src/worklet.js"],"sourcesContent":["let instance, heapFloat32;\r\n\r\nclass RNNoiseAudioWorklet extends AudioWorkletProcessor {\r\n    constructor(options) {\r\n        super({\r\n            ...options,\r\n            numberOfInputs: 1,\r\n            numberOfOutputs: 1,\r\n            outputChannelCount: [1]\r\n        });\r\n        if (!instance)\r\n            heapFloat32 = new Float32Array((instance = new WebAssembly.Instance(options.processorOptions.module).exports).memory.buffer);\r\n        this.state = instance.newState();\r\n        this.alive = true;\r\n        this.statSize = Math.ceil(sampleRate / 128);\r\n        this.stat = new Float32Array(2 * this.statSize); //1s\r\n        this.statPtr = 0;\r\n        this.ts = 0;\r\n        this.port.onmessage = ({ data: keepalive }) => {\r\n            if (this.alive) {\r\n                if (keepalive) {\r\n                    const message = { vadProb: instance.getVadProb(this.state) };\r\n                    if (keepalive === 'stat') {\r\n                        message.stat = this.stat;\r\n                    }\r\n\r\n                    this.port.postMessage(message);\r\n                } else {\r\n                    this.alive = false;\r\n                    instance.deleteState(this.state);\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    process(input, output) {\r\n        if (!this.alive) return false;\r\n\r\n        const ts = Date.now();\r\n\r\n        heapFloat32.set(input[0][0], instance.getInput(this.state) / 4);\r\n        const o = output[0][0];\r\n        const ptr4 = instance.pipe(this.state, o.length) / 4;\r\n\r\n        if (ptr4) {\r\n            o.set(heapFloat32.subarray(ptr4, ptr4 + o.length));\r\n        }\r\n\r\n        if (this.ts !== 0) {\r\n            this.stat[this.statPtr] = ts - this.ts;\r\n            this.stat[this.statPtr + this.statSize] = Date.now() - this.ts;\r\n            this.statPtr = (this.statPtr + 1) % this.statSize;\r\n        }\r\n        this.ts = ts;\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nregisterProcessor(\"rnnoise\", RNNoiseAudioWorklet);\r\n"],"names":["AudioWorkletProcessor","Float32Array","WebAssembly","Math","sampleRate","Date","registerProcessor"],"mappings":"AAAA,IAAI,EAAU,CAEd,OAAM,UAA4BA,sBAC9B,YAAY,CAAO,CAAE,CACjB,KAAK,CAAC,CACF,GAAG,CAAO,CACV,eAAgB,EAChB,gBAAiB,EACjB,mBAAoB,CAAC,EAAE,AAC3B,GACI,AAAC,GACD,GAAc,IAAIC,aAAa,AAAC,GAAW,IAAIC,YAAY,QAAQ,CAAC,EAAQ,gBAAgB,CAAC,MAAM,EAAE,OAAO,AAAD,EAAG,MAAM,CAAC,MAAM,GAC/H,IAAI,CAAC,KAAK,CAAG,EAAS,QAAQ,GAC9B,IAAI,CAAC,KAAK,CAAG,GACb,IAAI,CAAC,QAAQ,CAAGC,KAAK,IAAI,CAACC,WAAa,KACvC,IAAI,CAAC,IAAI,CAAG,IAAIH,aAAa,EAAI,IAAI,CAAC,QAAQ,EAC9C,IAAI,CAAC,OAAO,CAAG,EACf,IAAI,CAAC,EAAE,CAAG,EACV,IAAI,CAAC,IAAI,CAAC,SAAS,CAAG,CAAC,CAAE,KAAM,CAAS,CAAE,IACtC,GAAI,IAAI,CAAC,KAAK,CACV,GAAI,EAAW,CACX,IAAM,EAAU,CAAE,QAAS,EAAS,UAAU,CAAC,IAAI,CAAC,KAAK,CAAE,CACvD,AAAc,UAAd,GACA,GAAQ,IAAI,CAAG,IAAI,CAAC,IAAI,AAAD,EAG3B,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,EAC1B,MACI,IAAI,CAAC,KAAK,CAAG,GACb,EAAS,WAAW,CAAC,IAAI,CAAC,KAAK,CAG3C,CACJ,CAEA,QAAQ,CAAK,CAAE,CAAM,CAAE,CACnB,GAAI,CAAC,IAAI,CAAC,KAAK,CAAE,MAAO,GAExB,IAAM,EAAKI,KAAK,GAAG,GAEnB,EAAY,GAAG,CAAC,CAAK,CAAC,EAAE,CAAC,EAAE,CAAE,EAAS,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAI,GAC7D,IAAM,EAAI,CAAM,CAAC,EAAE,CAAC,EAAE,CAChB,EAAO,EAAS,IAAI,CAAC,IAAI,CAAC,KAAK,CAAE,EAAE,MAAM,EAAI,EAanD,OAXI,GACA,EAAE,GAAG,CAAC,EAAY,QAAQ,CAAC,EAAM,EAAO,EAAE,MAAM,GAGpC,IAAZ,IAAI,CAAC,EAAE,GACP,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAG,EAAK,IAAI,CAAC,EAAE,CACtC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAG,IAAI,CAAC,QAAQ,CAAC,CAAGA,KAAK,GAAG,GAAK,IAAI,CAAC,EAAE,CAC9D,IAAI,CAAC,OAAO,CAAG,AAAC,KAAI,CAAC,OAAO,CAAG,GAAK,IAAI,CAAC,QAAQ,EAErD,IAAI,CAAC,EAAE,CAAG,EAEH,EACX,CACJ,CAEAC,kBAAkB,UAAW"}